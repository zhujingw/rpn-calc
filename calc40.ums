######################         rpn calculator      ###########################
####################### Zhujing Wang & Michelle Luo ###########################
#######################          May 02, 2017       ###########################

# r0 - zero
# r1 - result / return address
# r2 - stack ptr
# r3 - value stack ptr
# r4 - GPR
# r5 - GPR
# r6 - temp
# r7 - temp

.zero r0
.temps r6, r7

.section data
.space 100000
val_stk: 
.section init
    r3 := val_stk          

.section data
jumptable:              
.space 256             
.section init           

################################ initialization ###############################        
init_table:
    r4 := 255           
                    
init_errors:               
    r5 := jumptable + r4        
    m[r0][r5] := input_error
    r4 := r4 - 1 
    if (r4 == 0) goto init_digs
    goto init_errors

init_digs:
    r4 := 48          
                   
fill_digs:               
    r5 := jumptable + r4        
    m[r0][r5] := push_dig
    r4 := r4 + 1
    if (r4 <=s 57 ) goto fill_digs using r1
    goto init_ops

init_ops:
.section init
    r5 := jumptable + ' '       
    m[r0][r5] := waiting        
    r5 := jumptable + '\n'
    m[r0][r5] := out
    r5 := jumptable + '+'
    m[r0][r5] := add
    r5 := jumptable + '-'
    m[r0][r5] := sub
    r5 := jumptable + '*'
    m[r0][r5] := mul
    r5 := jumptable + '/'
    m[r0][r5] := div
    r5 := jumptable + '|'
    m[r0][r5] := or
    r5 := jumptable + '&'
    m[r0][r5] := and
    r5 := jumptable + 'c'
    m[r0][r5] := neg
    r5 := jumptable + '~'
    m[r0][r5] := com
    r5 := jumptable + 's'
    m[r0][r5] := swap
    r5 := jumptable + 'd'
    m[r0][r5] := duplicate
    r5 := jumptable + 'p'
    m[r0][r5] := pop_val
    r5 := jumptable + 'z'
    m[r0][r5] := zero
.section text

push_dig:
    .section text
    r1 := r1 - 48              
                        
    push r1 on stack r3             
    goto entering

#################################### states ################################### 
entering:
    .section text               
    r1 := input()
    if (r1 == -1) goto end_of_program using r5
    if (r1 <s 48) goto not_num using r5    
    if (r1 >s 57) goto not_num using r5    
    r1 := r1 - 48
    pop r5 off stack r3
    r5 := r5 * 10               
    r5 := r5 + r1              
    push r5 on stack r3             
    goto entering               

not_num:
    .section text
    r5 := r1 + jumptable            
    r5 := m[r0][r5]             
    goto r5                 

waiting:
    .section text 
    r1 := input()               
    if (r1 == -1) goto end_of_program using r5        
    r5 := r1 + jumptable             
    r5 := m[r0][r5]                     
    goto r5           

################################## err_message ################################
.section text

input_error:
    .section text
    output "Unknown character '"
    output r1               
    output "'\n"              
    goto waiting

check_has_1:
    .section text
    push r4 on stack r2
    r4 := val_stk - 1
    if (r4 >=s r3) goto r1 using r5
    output "Stack underflow---expected at least 1 elements\n"
    pop r4 off stack r2
    goto waiting

check_has_2:
    .section text
    push r4 on stack r2
    r4 := val_stk - 2
    if (r4 >=s r3) goto r1 using r5
    output "Stack underflow---expected at least 2 elements\n"
    pop r4 off stack r2
    goto waiting

################################## operations ################################# 
out:       
    push r4 on stack r2     
    r4 := r3            
    goto print_general using r5    
    pop r4 off stack r2     
    goto waiting

add:
    goto check_has_2 linking r1
    pop r4 off stack r3
    pop r5 off stack r3
    r4 := r4 + r5
    push r4 on stack r3
    goto waiting

sub:
    goto check_has_2 linking r1
    pop r4 off stack r3
    pop r5 off stack r3
    r4 := r5 - r4
    push r4 on stack r3
    goto waiting

mul:
    goto check_has_2 linking r1
    pop r4 off stack r3
    pop r5 off stack r3
    r4 := r5 * r4
    push r4 on stack r3
    goto waiting

div:
   goto check_has_2 linking r1
    pop r4 off stack r3             
    pop r5 off stack r3            
    if (r4 == 0) goto zero_denom        
    if (r5 <s 0) goto neg_numerator using r1   
    if (r4 <s 0) goto neg_denom using r1   
    r4 := r5 / r4
    push r4 on stack r3
    goto waiting

zero_denom:
    output "Division by zero\n"
    push r5 on stack r3             
    push r4 on stack r3            
    goto waiting                

neg_numerator:
    r5 := -r5
    if (r4 <s 0) goto neg_denom using r1    
    r4 := r5 / r4               
    push r4 on stack r3
    goto waiting

neg_denom: 
    r4 := -r4                   
    r4 := r5 / r4               
    push r4 on stack r3
    goto waiting       
                        
and:
    goto check_has_2 linking r1
    pop r4 off stack r3
    pop r5 off stack r3
    r4 := r5 & r4
    push r4 on stack r3
    goto waiting

or:
    goto check_has_2 linking r1
    pop r4 off stack r3
    pop r5 off stack r3
    r4 := r5 | r4
    push r4 on stack r3
    goto waiting

com:
    goto check_has_1 linking r1
    pop r4 off stack r3
    r4 := ~r4
    push r4 on stack r3
    goto waiting

neg:
    goto check_has_1 linking r1
    pop r4 off stack r3
    r4 := -r4
    push r4 on stack r3
    goto waiting

swap:
    goto check_has_2 linking r1
    pop r4 off stack r3
    pop r5 off stack r3
    push r4 on stack r3
    push r5 on stack r3
    goto waiting 

duplicate:   
    goto check_has_2 linking r1
    pop r4 off stack r3
    push r4 on stack r3
    push r4 on stack r3
    goto waiting

pop_val:
    goto check_has_1 linking r1
    pop r4 off stack r3
    goto waiting

zero:
    goto check_has_1 linking r1
    pop r4 off stack r3
    goto zero

############################ end of comp 40 oh yeh ############################
end_of_program: 
    .section text
    halt